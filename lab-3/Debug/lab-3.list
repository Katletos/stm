
lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c8  080043c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043c8  080043c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043c8  080043c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08004440  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004440  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009860  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c63  00000000  00000000  000298f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002b560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177a6  00000000  00000000  0002c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a637  00000000  00000000  00043d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087204  00000000  00000000  0004e385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000d55dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004330 	.word	0x08004330

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004330 	.word	0x08004330

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_f2uiz>:
 8000ea8:	0042      	lsls	r2, r0, #1
 8000eaa:	d20e      	bcs.n	8000eca <__aeabi_f2uiz+0x22>
 8000eac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eb0:	d30b      	bcc.n	8000eca <__aeabi_f2uiz+0x22>
 8000eb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eba:	d409      	bmi.n	8000ed0 <__aeabi_f2uiz+0x28>
 8000ebc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec8:	4770      	bx	lr
 8000eca:	f04f 0000 	mov.w	r0, #0
 8000ece:	4770      	bx	lr
 8000ed0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ed4:	d101      	bne.n	8000eda <__aeabi_f2uiz+0x32>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	d102      	bne.n	8000ee0 <__aeabi_f2uiz+0x38>
 8000eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ede:	4770      	bx	lr
 8000ee0:	f04f 0000 	mov.w	r0, #0
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <synth_sawtooth>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float synth_sawtooth(float t, float f, float a, float phi){
 8000ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
    return a / M_PI * ((int)(t * 2 * M_PI * f + phi + M_PI) % (int)(2 * M_PI) - M_PI);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fa95 	bl	8000428 <__aeabi_f2d>
 8000efe:	a332      	add	r3, pc, #200	; (adr r3, 8000fc8 <synth_sawtooth+0xe0>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	f7ff fc12 	bl	800072c <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	461d      	mov	r5, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fd6f 	bl	80009f8 <__addsf3>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fa83 	bl	8000428 <__aeabi_f2d>
 8000f22:	a329      	add	r3, pc, #164	; (adr r3, 8000fc8 <synth_sawtooth+0xe0>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fad6 	bl	80004d8 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4690      	mov	r8, r2
 8000f32:	4699      	mov	r9, r3
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff fa77 	bl	8000428 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4640      	mov	r0, r8
 8000f40:	4649      	mov	r1, r9
 8000f42:	f7ff fac9 	bl	80004d8 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4690      	mov	r8, r2
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f7ff fa6a 	bl	8000428 <__aeabi_f2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4640      	mov	r0, r8
 8000f5a:	4649      	mov	r1, r9
 8000f5c:	f7ff f906 	bl	800016c <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	a317      	add	r3, pc, #92	; (adr r3, 8000fc8 <synth_sawtooth+0xe0>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff f8fd 	bl	800016c <__adddf3>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fcbf 	bl	80008fc <__aeabi_d2iz>
 8000f7e:	4601      	mov	r1, r0
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <synth_sawtooth+0xe8>)
 8000f82:	fb83 3201 	smull	r3, r2, r3, r1
 8000f86:	17cb      	asrs	r3, r1, #31
 8000f88:	1ad2      	subs	r2, r2, r3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	1aca      	subs	r2, r1, r3
 8000f94:	4610      	mov	r0, r2
 8000f96:	f7ff fa35 	bl	8000404 <__aeabi_i2d>
 8000f9a:	a30b      	add	r3, pc, #44	; (adr r3, 8000fc8 <synth_sawtooth+0xe0>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff f8e2 	bl	8000168 <__aeabi_dsub>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4620      	mov	r0, r4
 8000faa:	4629      	mov	r1, r5
 8000fac:	f7ff fa94 	bl	80004d8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fcc8 	bl	800094c <__aeabi_d2f>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fc8:	54442d18 	.word	0x54442d18
 8000fcc:	400921fb 	.word	0x400921fb
 8000fd0:	2aaaaaab 	.word	0x2aaaaaab
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <synth_triangle>:

float synth_triangle(float t, float f, float a, float phi){
 8000fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	603b      	str	r3, [r7, #0]
    return (2 * a / M_PI) * (abs((int)(((int)(t * 2 * M_PI * f + phi + (3 * M_PI / 2)) % (int)(2 * M_PI)) - M_PI)) - (M_PI / 2));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fd03 	bl	80009f8 <__addsf3>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa17 	bl	8000428 <__aeabi_f2d>
 8000ffa:	a33b      	add	r3, pc, #236	; (adr r3, 80010e8 <synth_triangle+0x110>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fb94 	bl	800072c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4619      	mov	r1, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fcf1 	bl	80009f8 <__addsf3>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa05 	bl	8000428 <__aeabi_f2d>
 800101e:	a332      	add	r3, pc, #200	; (adr r3, 80010e8 <synth_triangle+0x110>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fa58 	bl	80004d8 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4690      	mov	r8, r2
 800102e:	4699      	mov	r9, r3
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f7ff f9f9 	bl	8000428 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4640      	mov	r0, r8
 800103c:	4649      	mov	r1, r9
 800103e:	f7ff fa4b 	bl	80004d8 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f7ff f9ec 	bl	8000428 <__aeabi_f2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4640      	mov	r0, r8
 8001056:	4649      	mov	r1, r9
 8001058:	f7ff f888 	bl	800016c <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	a322      	add	r3, pc, #136	; (adr r3, 80010f0 <synth_triangle+0x118>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff f87f 	bl	800016c <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fc41 	bl	80008fc <__aeabi_d2iz>
 800107a:	4601      	mov	r1, r0
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <synth_triangle+0x128>)
 800107e:	fb83 3201 	smull	r3, r2, r3, r1
 8001082:	17cb      	asrs	r3, r1, #31
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	1aca      	subs	r2, r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f7ff f9b7 	bl	8000404 <__aeabi_i2d>
 8001096:	a314      	add	r3, pc, #80	; (adr r3, 80010e8 <synth_triangle+0x110>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f864 	bl	8000168 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc28 	bl	80008fc <__aeabi_d2iz>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bfb8      	it	lt
 80010b2:	425b      	neglt	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9a5 	bl	8000404 <__aeabi_i2d>
 80010ba:	a30f      	add	r3, pc, #60	; (adr r3, 80010f8 <synth_triangle+0x120>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff fa04 	bl	80004d8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fc38 	bl	800094c <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010e8:	54442d18 	.word	0x54442d18
 80010ec:	400921fb 	.word	0x400921fb
 80010f0:	7f3321d2 	.word	0x7f3321d2
 80010f4:	4012d97c 	.word	0x4012d97c
 80010f8:	54442d18 	.word	0x54442d18
 80010fc:	3ff921fb 	.word	0x3ff921fb
 8001100:	2aaaaaab 	.word	0x2aaaaaab

08001104 <get_am>:

float get_am(float t){
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	float carrier = synth_sawtooth(t, 440.0, 1.0, 0.0);
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <get_am+0x4c>)
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fee6 	bl	8000ee8 <synth_sawtooth>
 800111c:	6178      	str	r0, [r7, #20]
	float a_m = 2.0;
 800111e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001122:	613b      	str	r3, [r7, #16]
	float modulator = synth_triangle(t, 1000.0, a_m, 0.0);
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	490a      	ldr	r1, [pc, #40]	; (8001154 <get_am+0x50>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff53 	bl	8000fd8 <synth_triangle>
 8001132:	60f8      	str	r0, [r7, #12]
	return carrier * modulator / a_m;
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff fd66 	bl	8000c08 <__aeabi_fmul>
 800113c:	4603      	mov	r3, r0
 800113e:	6939      	ldr	r1, [r7, #16]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe15 	bl	8000d70 <__aeabi_fdiv>
 8001146:	4603      	mov	r3, r0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	43dc0000 	.word	0x43dc0000
 8001154:	447a0000 	.word	0x447a0000

08001158 <get_fm>:


float get_fm(float t){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	float carrier = synth_sawtooth(t, 440.0, 1.0, 0.0);
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001168:	490b      	ldr	r1, [pc, #44]	; (8001198 <get_fm+0x40>)
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff febc 	bl	8000ee8 <synth_sawtooth>
 8001170:	60f8      	str	r0, [r7, #12]
	return synth_triangle(t, carrier + 2, 1.0, 0.0);
 8001172:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff fc3e 	bl	80009f8 <__addsf3>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff25 	bl	8000fd8 <synth_triangle>
 800118e:	4603      	mov	r3, r0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	43dc0000 	.word	0x43dc0000

0800119c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d102      	bne.n	80011b4 <HAL_ADC_ConvCpltCallback+0x18>
    {
    	adc_ready = true;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
    }
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40012400 	.word	0x40012400
 80011c4:	2000014c 	.word	0x2000014c

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ce:	f000 fafd 	bl	80017cc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d2:	f000 f871 	bl	80012b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d6:	f000 f94d 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 80011da:	f000 f92d 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011de:	f000 f901 	bl	80013e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011e2:	f000 f8c1 	bl	8001368 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80011e6:	482c      	ldr	r0, [pc, #176]	; (8001298 <main+0xd0>)
 80011e8:	f000 ff14 	bl	8002014 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	492b      	ldr	r1, [pc, #172]	; (800129c <main+0xd4>)
 80011f0:	4829      	ldr	r0, [pc, #164]	; (8001298 <main+0xd0>)
 80011f2:	f000 fc25 	bl	8001a40 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      snprintf(trans_str, sizeof(trans_str), "ADC %d\r\n", (uint16_t)adc);
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <main+0xd4>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <main+0xd8>)
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <main+0xdc>)
 8001202:	f002 fc07 	bl	8003a14 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&trans_str, strlen(trans_str), 1000);
 8001206:	4827      	ldr	r0, [pc, #156]	; (80012a4 <main+0xdc>)
 8001208:	f7fe ffa2 	bl	8000150 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	4923      	ldr	r1, [pc, #140]	; (80012a4 <main+0xdc>)
 8001216:	4824      	ldr	r0, [pc, #144]	; (80012a8 <main+0xe0>)
 8001218:	f002 f9f6 	bl	8003608 <HAL_UART_Transmit>

	  uint32_t sys_tick = HAL_GetTick();
 800121c:	f000 fb2e 	bl	800187c <HAL_GetTick>
 8001220:	6078      	str	r0, [r7, #4]

	  switch (mode) {
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <main+0xe4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d023      	beq.n	8001274 <main+0xac>
 800122c:	2b02      	cmp	r3, #2
 800122e:	dce2      	bgt.n	80011f6 <main+0x2e>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <main+0x72>
 8001234:	2b01      	cmp	r3, #1
 8001236:	d00e      	beq.n	8001256 <main+0x8e>
 8001238:	e02c      	b.n	8001294 <main+0xcc>
	   case ANALOG:
		   if (adc_ready){
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <main+0xe8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d026      	beq.n	8001292 <main+0xca>
			   adc_ready = false;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <main+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

//			   HAL_UART_Transmit(&huart2, (uint8_t*)&adc, sizeof(adc), 1000);
			   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 1);
 800124a:	2201      	movs	r2, #1
 800124c:	4913      	ldr	r1, [pc, #76]	; (800129c <main+0xd4>)
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <main+0xd0>)
 8001250:	f000 fbf6 	bl	8001a40 <HAL_ADC_Start_DMA>
		   }
		   break;
 8001254:	e01d      	b.n	8001292 <main+0xca>
	   case FM:
//		   HAL_UART_Transmit(&huart2, (uint8_t*)&function, sizeof(function), 1000);
		   function = get_fm(sys_tick);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fc7e 	bl	8000b58 <__aeabi_ui2f>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff7a 	bl	8001158 <get_fm>
 8001264:	4603      	mov	r3, r0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fe1e 	bl	8000ea8 <__aeabi_f2uiz>
 800126c:	4603      	mov	r3, r0
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <main+0xec>)
 8001270:	6013      	str	r3, [r2, #0]
	       break;
 8001272:	e00f      	b.n	8001294 <main+0xcc>
	   case AM:
//		   HAL_UART_Transmit(&huart2, (uint8_t*)&function, sizeof(function), 1000);
		   function = get_am(sys_tick);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fc6f 	bl	8000b58 <__aeabi_ui2f>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff41 	bl	8001104 <get_am>
 8001282:	4603      	mov	r3, r0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe0f 	bl	8000ea8 <__aeabi_f2uiz>
 800128a:	4603      	mov	r3, r0
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <main+0xec>)
 800128e:	6013      	str	r3, [r2, #0]
		   break;
 8001290:	e000      	b.n	8001294 <main+0xcc>
		   break;
 8001292:	bf00      	nop
  {
 8001294:	e7af      	b.n	80011f6 <main+0x2e>
 8001296:	bf00      	nop
 8001298:	2000008c 	.word	0x2000008c
 800129c:	2000014a 	.word	0x2000014a
 80012a0:	08004348 	.word	0x08004348
 80012a4:	20000154 	.word	0x20000154
 80012a8:	20000100 	.word	0x20000100
 80012ac:	20000148 	.word	0x20000148
 80012b0:	2000014c 	.word	0x2000014c
 80012b4:	20000150 	.word	0x20000150

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	; 0x50
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fb9c 	bl	8003a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012f8:	2300      	movs	r3, #0
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012fc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fbb2 	bl	8002a70 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001312:	f000 f8e9 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001326:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fe1e 	bl	8002f74 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800133e:	f000 f8d3 	bl	80014e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001342:	2302      	movs	r3, #2
 8001344:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4618      	mov	r0, r3
 8001350:	f001 ff9e 	bl	8003290 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800135a:	f000 f8c5 	bl	80014e8 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3750      	adds	r7, #80	; 0x50
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_ADC1_Init+0x74>)
 800137a:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <MX_ADC1_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_ADC1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_ADC1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_ADC1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_ADC1_Init+0x74>)
 8001392:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_ADC1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_ADC1_Init+0x74>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_ADC1_Init+0x74>)
 80013a6:	f000 fa73 	bl	8001890 <HAL_ADC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 f89a 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80013bc:	2302      	movs	r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_ADC1_Init+0x74>)
 80013c6:	f000 fc2b 	bl	8001c20 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013d0:	f000 f88a 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000008c 	.word	0x2000008c
 80013e0:	40012400 	.word	0x40012400

080013e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART2_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 800141c:	f002 f8a4 	bl	8003568 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f85f 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000100 	.word	0x20000100
 8001434:	40004400 	.word	0x40004400

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_DMA_Init+0x38>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <MX_DMA_Init+0x38>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6153      	str	r3, [r2, #20]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_DMA_Init+0x38>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200b      	movs	r0, #11
 800145c:	f000 ff5f 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001460:	200b      	movs	r0, #11
 8001462:	f000 ff78 	bl	8002356 <HAL_NVIC_EnableIRQ>

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_GPIO_Init+0x70>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <MX_GPIO_Init+0x70>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_GPIO_Init+0x70>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_GPIO_Init+0x70>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <MX_GPIO_Init+0x70>)
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	6193      	str	r3, [r2, #24]
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <MX_GPIO_Init+0x70>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_MspInit+0x5c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_MspInit+0x5c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_MspInit+0x5c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_MspInit+0x5c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_MspInit+0x60>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_MspInit+0x60>)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_ADC_MspInit+0xbc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d149      	bne.n	800160c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a26      	ldr	r2, [pc, #152]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a20      	ldr	r2, [pc, #128]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a8:	2301      	movs	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ac:	2303      	movs	r3, #3
 80015ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <HAL_ADC_MspInit+0xc4>)
 80015b8:	f001 f8d6 	bl	8002768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015be:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_ADC_MspInit+0xcc>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 80015f2:	f000 fecb 	bl	800238c <HAL_DMA_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80015fc:	f7ff ff74 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 8001604:	621a      	str	r2, [r3, #32]
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_ADC_MspInit+0xc8>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40012400 	.word	0x40012400
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800
 8001620:	200000bc 	.word	0x200000bc
 8001624:	40020008 	.word	0x40020008

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_UART_MspInit+0x70>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d123      	bne.n	8001690 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_UART_MspInit+0x74>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_UART_MspInit+0x74>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001652:	61d3      	str	r3, [r2, #28]
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0x74>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_MspInit+0x74>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_UART_MspInit+0x74>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_UART_MspInit+0x74>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001678:	230c      	movs	r3, #12
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x78>)
 800168c:	f001 f86c 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40004400 	.word	0x40004400
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 f8b5 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA1_Channel1_IRQHandler+0x10>)
 80016fa:	f000 ff01 	bl	8002500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000bc 	.word	0x200000bc

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f002 f93a 	bl	80039b0 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20005000 	.word	0x20005000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000194 	.word	0x20000194
 8001770:	200001b0 	.word	0x200001b0

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff fff8 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001786:	490c      	ldr	r1, [pc, #48]	; (80017b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001788:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800179c:	4c09      	ldr	r4, [pc, #36]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f002 f907 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ae:	f7ff fd0b 	bl	80011c8 <main>
  bx lr
 80017b2:	4770      	bx	lr
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017bc:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 80017c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017c4:	200001ac 	.word	0x200001ac

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x28>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 fd93 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe84 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40022000 	.word	0x40022000

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fdab 	bl	8002372 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001834:	f000 fd73 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	20000008 	.word	0x20000008
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x1c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_IncTick+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_IncTick+0x20>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000008 	.word	0x20000008
 8001878:	20000198 	.word	0x20000198

0800187c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_GetTick+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000198 	.word	0x20000198

08001890 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0be      	b.n	8001a30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fe42 	bl	8001558 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 faf5 	bl	8001ec4 <ADC_ConversionStop_Disable>
 80018da:	4603      	mov	r3, r0
 80018dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 8099 	bne.w	8001a1e <HAL_ADC_Init+0x18e>
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8095 	bne.w	8001a1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018fc:	f023 0302 	bic.w	r3, r3, #2
 8001900:	f043 0202 	orr.w	r2, r3, #2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001910:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7b1b      	ldrb	r3, [r3, #12]
 8001916:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001918:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	4313      	orrs	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001928:	d003      	beq.n	8001932 <HAL_ADC_Init+0xa2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d102      	bne.n	8001938 <HAL_ADC_Init+0xa8>
 8001932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001936:	e000      	b.n	800193a <HAL_ADC_Init+0xaa>
 8001938:	2300      	movs	r3, #0
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7d1b      	ldrb	r3, [r3, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d119      	bne.n	800197c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7b1b      	ldrb	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	3b01      	subs	r3, #1
 8001956:	035a      	lsls	r2, r3, #13
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e00b      	b.n	800197c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f043 0220 	orr.w	r2, r3, #32
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_ADC_Init+0x1a8>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_Init+0x126>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d104      	bne.n	80019c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	051b      	lsls	r3, r3, #20
 80019be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_ADC_Init+0x1ac>)
 80019dc:	4013      	ands	r3, r2
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d10b      	bne.n	80019fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fa:	e018      	b.n	8001a2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	f023 0312 	bic.w	r3, r3, #18
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1c:	e007      	b.n	8001a2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	f043 0210 	orr.w	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	ffe1f7fd 	.word	0xffe1f7fd
 8001a3c:	ff1f0efe 	.word	0xff1f0efe

08001a40 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a64      	ldr	r2, [pc, #400]	; (8001be8 <HAL_ADC_Start_DMA+0x1a8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d004      	beq.n	8001a64 <HAL_ADC_Start_DMA+0x24>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a63      	ldr	r2, [pc, #396]	; (8001bec <HAL_ADC_Start_DMA+0x1ac>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d106      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x32>
 8001a64:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <HAL_ADC_Start_DMA+0x1a8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 80b3 	bne.w	8001bd8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_Start_DMA+0x40>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e0ae      	b.n	8001bde <HAL_ADC_Start_DMA+0x19e>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f9c1 	bl	8001e10 <ADC_Enable>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 809a 	bne.w	8001bce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_ADC_Start_DMA+0x1ac>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0x84>
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_ADC_Start_DMA+0x1a8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d115      	bne.n	8001af0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d026      	beq.n	8001b2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aee:	e01d      	b.n	8001b2c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a39      	ldr	r2, [pc, #228]	; (8001be8 <HAL_ADC_Start_DMA+0x1a8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_ADC_Start_DMA+0xd0>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a38      	ldr	r2, [pc, #224]	; (8001bec <HAL_ADC_Start_DMA+0x1ac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d10d      	bne.n	8001b2c <HAL_ADC_Start_DMA+0xec>
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_ADC_Start_DMA+0x1a8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f023 0206 	bic.w	r2, r3, #6
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_ADC_Start_DMA+0x1b0>)
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_ADC_Start_DMA+0x1b4>)
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_ADC_Start_DMA+0x1b8>)
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0202 	mvn.w	r2, #2
 8001b74:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b84:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a18      	ldr	r0, [r3, #32]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	334c      	adds	r3, #76	; 0x4c
 8001b90:	4619      	mov	r1, r3
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f000 fc53 	bl	8002440 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ba4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ba8:	d108      	bne.n	8001bbc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bb8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bba:	e00f      	b.n	8001bdc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bcc:	e006      	b.n	8001bdc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001bd6:	e001      	b.n	8001bdc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40012400 	.word	0x40012400
 8001bec:	40012800 	.word	0x40012800
 8001bf0:	08001f47 	.word	0x08001f47
 8001bf4:	08001fc3 	.word	0x08001fc3
 8001bf8:	08001fdf 	.word	0x08001fdf

08001bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x20>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e0dc      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x1da>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d81c      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b05      	subs	r3, #5
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b05      	subs	r3, #5
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
 8001c88:	e03c      	b.n	8001d04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d81c      	bhi.n	8001ccc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b23      	subs	r3, #35	; 0x23
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4019      	ands	r1, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b23      	subs	r3, #35	; 0x23
 8001cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cca:	e01b      	b.n	8001d04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b41      	subs	r3, #65	; 0x41
 8001cde:	221f      	movs	r2, #31
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4019      	ands	r1, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b41      	subs	r3, #65	; 0x41
 8001cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	d91c      	bls.n	8001d46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b1e      	subs	r3, #30
 8001d1e:	2207      	movs	r2, #7
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4019      	ands	r1, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6898      	ldr	r0, [r3, #8]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	3b1e      	subs	r3, #30
 8001d38:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	e019      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6919      	ldr	r1, [r3, #16]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4019      	ands	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6898      	ldr	r0, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d003      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d86:	2b11      	cmp	r3, #17
 8001d88:	d132      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d125      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d126      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001db0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d11a      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0c9a      	lsrs	r2, r3, #18
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dd0:	e002      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f9      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001dde:	e007      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40012400 	.word	0x40012400
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d040      	beq.n	8001eb0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <ADC_Enable+0xac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <ADC_Enable+0xb0>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e4c:	e002      	b.n	8001e54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e5a:	f7ff fd0f 	bl	800187c <HAL_GetTick>
 8001e5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e60:	e01f      	b.n	8001ea2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e62:	f7ff fd0b 	bl	800187c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d918      	bls.n	8001ea2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d011      	beq.n	8001ea2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f043 0210 	orr.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e007      	b.n	8001eb2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d1d8      	bne.n	8001e62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d12e      	bne.n	8001f3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eee:	f7ff fcc5 	bl	800187c <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	e01b      	b.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef6:	f7ff fcc1 	bl	800187c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d914      	bls.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10d      	bne.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e007      	b.n	8001f3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d0dc      	beq.n	8001ef6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d127      	bne.n	8001fb0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f7a:	d115      	bne.n	8001fa8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff f8f7 	bl	800119c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fae:	e004      	b.n	8001fba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fe13 	bl	8001bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff fe02 	bl	8001c0e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADCEx_Calibration_Start+0x1e>
 800202e:	2302      	movs	r3, #2
 8002030:	e097      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x14e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff42 	bl	8001ec4 <ADC_ConversionStop_Disable>
 8002040:	4603      	mov	r3, r0
 8002042:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fee3 	bl	8001e10 <ADC_Enable>
 800204a:	4603      	mov	r3, r0
 800204c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8081 	bne.w	8002158 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205e:	f023 0302 	bic.w	r3, r3, #2
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800206a:	4b40      	ldr	r3, [pc, #256]	; (800216c <HAL_ADCEx_Calibration_Start+0x158>)
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	2002      	movs	r0, #2
 8002070:	f001 f9c4 	bl	80033fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002074:	4603      	mov	r3, r0
 8002076:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800207a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800207c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800207e:	e002      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3b01      	subs	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800209c:	f7ff fbee 	bl	800187c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020a2:	e01b      	b.n	80020dc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020a4:	f7ff fbea 	bl	800187c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b0a      	cmp	r3, #10
 80020b0:	d914      	bls.n	80020dc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f023 0312 	bic.w	r3, r3, #18
 80020c8:	f043 0210 	orr.w	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e042      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1dc      	bne.n	80020a4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0204 	orr.w	r2, r2, #4
 80020f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020fa:	f7ff fbbf 	bl	800187c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002100:	e01b      	b.n	800213a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002102:	f7ff fbbb 	bl	800187c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b0a      	cmp	r3, #10
 800210e:	d914      	bls.n	800213a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f023 0312 	bic.w	r3, r3, #18
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e013      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1dc      	bne.n	8002102 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f023 0303 	bic.w	r3, r3, #3
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	7dfb      	ldrb	r3, [r7, #23]
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <__NVIC_EnableIRQ+0x34>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e8:	f7ff ff90 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff2d 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff42 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff90 	bl	8002260 <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5f 	bl	800220c <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff35 	bl	80021d4 <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e043      	b.n	800242a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_DMA_Init+0xa8>)
 80023aa:	4413      	add	r3, r2
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <HAL_DMA_Init+0xac>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	009a      	lsls	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_DMA_Init+0xb0>)
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	bffdfff8 	.word	0xbffdfff8
 8002438:	cccccccd 	.word	0xcccccccd
 800243c:	40020000 	.word	0x40020000

08002440 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_DMA_Start_IT+0x20>
 800245c:	2302      	movs	r3, #2
 800245e:	e04b      	b.n	80024f8 <HAL_DMA_Start_IT+0xb8>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d13a      	bne.n	80024ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f937 	bl	800270c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 020e 	orr.w	r2, r2, #14
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e00f      	b.n	80024d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0204 	bic.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 020a 	orr.w	r2, r2, #10
 80024d6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e005      	b.n	80024f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2204      	movs	r2, #4
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d04f      	beq.n	80025c8 <HAL_DMA_IRQHandler+0xc8>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d04a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0204 	bic.w	r2, r2, #4
 800254e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d029      	beq.n	80025ae <HAL_DMA_IRQHandler+0xae>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <HAL_DMA_IRQHandler+0xaa>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a63      	ldr	r2, [pc, #396]	; (80026f8 <HAL_DMA_IRQHandler+0x1f8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01a      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xa4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a62      	ldr	r2, [pc, #392]	; (80026fc <HAL_DMA_IRQHandler+0x1fc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d012      	beq.n	800259e <HAL_DMA_IRQHandler+0x9e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a60      	ldr	r2, [pc, #384]	; (8002700 <HAL_DMA_IRQHandler+0x200>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00a      	beq.n	8002598 <HAL_DMA_IRQHandler+0x98>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5f      	ldr	r2, [pc, #380]	; (8002704 <HAL_DMA_IRQHandler+0x204>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <HAL_DMA_IRQHandler+0x92>
 800258c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002590:	e00e      	b.n	80025b0 <HAL_DMA_IRQHandler+0xb0>
 8002592:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002596:	e00b      	b.n	80025b0 <HAL_DMA_IRQHandler+0xb0>
 8002598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800259c:	e008      	b.n	80025b0 <HAL_DMA_IRQHandler+0xb0>
 800259e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a2:	e005      	b.n	80025b0 <HAL_DMA_IRQHandler+0xb0>
 80025a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a8:	e002      	b.n	80025b0 <HAL_DMA_IRQHandler+0xb0>
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	e000      	b.n	80025b0 <HAL_DMA_IRQHandler+0xb0>
 80025ae:	2304      	movs	r3, #4
 80025b0:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_DMA_IRQHandler+0x208>)
 80025b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8094 	beq.w	80026e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025c6:	e08e      	b.n	80026e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2202      	movs	r2, #2
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d056      	beq.n	8002686 <HAL_DMA_IRQHandler+0x186>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d051      	beq.n	8002686 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 020a 	bic.w	r2, r2, #10
 80025fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a38      	ldr	r2, [pc, #224]	; (80026f0 <HAL_DMA_IRQHandler+0x1f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d029      	beq.n	8002666 <HAL_DMA_IRQHandler+0x166>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_IRQHandler+0x162>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01a      	beq.n	800265c <HAL_DMA_IRQHandler+0x15c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a34      	ldr	r2, [pc, #208]	; (80026fc <HAL_DMA_IRQHandler+0x1fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0x156>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a32      	ldr	r2, [pc, #200]	; (8002700 <HAL_DMA_IRQHandler+0x200>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x150>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_DMA_IRQHandler+0x204>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d102      	bne.n	800264a <HAL_DMA_IRQHandler+0x14a>
 8002644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002648:	e00e      	b.n	8002668 <HAL_DMA_IRQHandler+0x168>
 800264a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264e:	e00b      	b.n	8002668 <HAL_DMA_IRQHandler+0x168>
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	e008      	b.n	8002668 <HAL_DMA_IRQHandler+0x168>
 8002656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800265a:	e005      	b.n	8002668 <HAL_DMA_IRQHandler+0x168>
 800265c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002660:	e002      	b.n	8002668 <HAL_DMA_IRQHandler+0x168>
 8002662:	2320      	movs	r3, #32
 8002664:	e000      	b.n	8002668 <HAL_DMA_IRQHandler+0x168>
 8002666:	2302      	movs	r3, #2
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_DMA_IRQHandler+0x208>)
 800266a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d034      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002684:	e02f      	b.n	80026e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2208      	movs	r2, #8
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d028      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x1e8>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020e 	bic.w	r2, r2, #14
 80026ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
    }
  }
  return;
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
}
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40020008 	.word	0x40020008
 80026f4:	4002001c 	.word	0x4002001c
 80026f8:	40020030 	.word	0x40020030
 80026fc:	40020044 	.word	0x40020044
 8002700:	40020058 	.word	0x40020058
 8002704:	4002006c 	.word	0x4002006c
 8002708:	40020000 	.word	0x40020000

0800270c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b10      	cmp	r3, #16
 8002738:	d108      	bne.n	800274c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800274a:	e007      	b.n	800275c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
	...

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b08b      	sub	sp, #44	; 0x2c
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277a:	e169      	b.n	8002a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800277c:	2201      	movs	r2, #1
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8158 	bne.w	8002a4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a9a      	ldr	r2, [pc, #616]	; (8002a08 <HAL_GPIO_Init+0x2a0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d05e      	beq.n	8002862 <HAL_GPIO_Init+0xfa>
 80027a4:	4a98      	ldr	r2, [pc, #608]	; (8002a08 <HAL_GPIO_Init+0x2a0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d875      	bhi.n	8002896 <HAL_GPIO_Init+0x12e>
 80027aa:	4a98      	ldr	r2, [pc, #608]	; (8002a0c <HAL_GPIO_Init+0x2a4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d058      	beq.n	8002862 <HAL_GPIO_Init+0xfa>
 80027b0:	4a96      	ldr	r2, [pc, #600]	; (8002a0c <HAL_GPIO_Init+0x2a4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d86f      	bhi.n	8002896 <HAL_GPIO_Init+0x12e>
 80027b6:	4a96      	ldr	r2, [pc, #600]	; (8002a10 <HAL_GPIO_Init+0x2a8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d052      	beq.n	8002862 <HAL_GPIO_Init+0xfa>
 80027bc:	4a94      	ldr	r2, [pc, #592]	; (8002a10 <HAL_GPIO_Init+0x2a8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d869      	bhi.n	8002896 <HAL_GPIO_Init+0x12e>
 80027c2:	4a94      	ldr	r2, [pc, #592]	; (8002a14 <HAL_GPIO_Init+0x2ac>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d04c      	beq.n	8002862 <HAL_GPIO_Init+0xfa>
 80027c8:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <HAL_GPIO_Init+0x2ac>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d863      	bhi.n	8002896 <HAL_GPIO_Init+0x12e>
 80027ce:	4a92      	ldr	r2, [pc, #584]	; (8002a18 <HAL_GPIO_Init+0x2b0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d046      	beq.n	8002862 <HAL_GPIO_Init+0xfa>
 80027d4:	4a90      	ldr	r2, [pc, #576]	; (8002a18 <HAL_GPIO_Init+0x2b0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d85d      	bhi.n	8002896 <HAL_GPIO_Init+0x12e>
 80027da:	2b12      	cmp	r3, #18
 80027dc:	d82a      	bhi.n	8002834 <HAL_GPIO_Init+0xcc>
 80027de:	2b12      	cmp	r3, #18
 80027e0:	d859      	bhi.n	8002896 <HAL_GPIO_Init+0x12e>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <HAL_GPIO_Init+0x80>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	08002863 	.word	0x08002863
 80027ec:	0800283d 	.word	0x0800283d
 80027f0:	0800284f 	.word	0x0800284f
 80027f4:	08002891 	.word	0x08002891
 80027f8:	08002897 	.word	0x08002897
 80027fc:	08002897 	.word	0x08002897
 8002800:	08002897 	.word	0x08002897
 8002804:	08002897 	.word	0x08002897
 8002808:	08002897 	.word	0x08002897
 800280c:	08002897 	.word	0x08002897
 8002810:	08002897 	.word	0x08002897
 8002814:	08002897 	.word	0x08002897
 8002818:	08002897 	.word	0x08002897
 800281c:	08002897 	.word	0x08002897
 8002820:	08002897 	.word	0x08002897
 8002824:	08002897 	.word	0x08002897
 8002828:	08002897 	.word	0x08002897
 800282c:	08002845 	.word	0x08002845
 8002830:	08002859 	.word	0x08002859
 8002834:	4a79      	ldr	r2, [pc, #484]	; (8002a1c <HAL_GPIO_Init+0x2b4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800283a:	e02c      	b.n	8002896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	623b      	str	r3, [r7, #32]
          break;
 8002842:	e029      	b.n	8002898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	3304      	adds	r3, #4
 800284a:	623b      	str	r3, [r7, #32]
          break;
 800284c:	e024      	b.n	8002898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	3308      	adds	r3, #8
 8002854:	623b      	str	r3, [r7, #32]
          break;
 8002856:	e01f      	b.n	8002898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	330c      	adds	r3, #12
 800285e:	623b      	str	r3, [r7, #32]
          break;
 8002860:	e01a      	b.n	8002898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800286a:	2304      	movs	r3, #4
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e013      	b.n	8002898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d105      	bne.n	8002884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002878:	2308      	movs	r3, #8
 800287a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	611a      	str	r2, [r3, #16]
          break;
 8002882:	e009      	b.n	8002898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002884:	2308      	movs	r3, #8
 8002886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	615a      	str	r2, [r3, #20]
          break;
 800288e:	e003      	b.n	8002898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
          break;
 8002894:	e000      	b.n	8002898 <HAL_GPIO_Init+0x130>
          break;
 8002896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2bff      	cmp	r3, #255	; 0xff
 800289c:	d801      	bhi.n	80028a2 <HAL_GPIO_Init+0x13a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	e001      	b.n	80028a6 <HAL_GPIO_Init+0x13e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3304      	adds	r3, #4
 80028a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2bff      	cmp	r3, #255	; 0xff
 80028ac:	d802      	bhi.n	80028b4 <HAL_GPIO_Init+0x14c>
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	e002      	b.n	80028ba <HAL_GPIO_Init+0x152>
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	3b08      	subs	r3, #8
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	210f      	movs	r1, #15
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	401a      	ands	r2, r3
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	431a      	orrs	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80b1 	beq.w	8002a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028e8:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <HAL_GPIO_Init+0x2b8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a4c      	ldr	r2, [pc, #304]	; (8002a20 <HAL_GPIO_Init+0x2b8>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <HAL_GPIO_Init+0x2b8>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002900:	4a48      	ldr	r2, [pc, #288]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a40      	ldr	r2, [pc, #256]	; (8002a28 <HAL_GPIO_Init+0x2c0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <HAL_GPIO_Init+0x1ec>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3f      	ldr	r2, [pc, #252]	; (8002a2c <HAL_GPIO_Init+0x2c4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_GPIO_Init+0x1e8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3e      	ldr	r2, [pc, #248]	; (8002a30 <HAL_GPIO_Init+0x2c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0x1e4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3d      	ldr	r2, [pc, #244]	; (8002a34 <HAL_GPIO_Init+0x2cc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_GPIO_Init+0x1e0>
 8002944:	2303      	movs	r3, #3
 8002946:	e006      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002948:	2304      	movs	r3, #4
 800294a:	e004      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 800294c:	2302      	movs	r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002954:	2300      	movs	r3, #0
 8002956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002958:	f002 0203 	and.w	r2, r2, #3
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	4093      	lsls	r3, r2
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002966:	492f      	ldr	r1, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	492c      	ldr	r1, [pc, #176]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800298e:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	43db      	mvns	r3, r3
 8002996:	4928      	ldr	r1, [pc, #160]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 8002998:	4013      	ands	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4922      	ldr	r1, [pc, #136]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	43db      	mvns	r3, r3
 80029be:	491e      	ldr	r1, [pc, #120]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4918      	ldr	r1, [pc, #96]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	4914      	ldr	r1, [pc, #80]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d021      	beq.n	8002a3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_GPIO_Init+0x2d0>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e021      	b.n	8002a4a <HAL_GPIO_Init+0x2e2>
 8002a06:	bf00      	nop
 8002a08:	10320000 	.word	0x10320000
 8002a0c:	10310000 	.word	0x10310000
 8002a10:	10220000 	.word	0x10220000
 8002a14:	10210000 	.word	0x10210000
 8002a18:	10120000 	.word	0x10120000
 8002a1c:	10110000 	.word	0x10110000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	40010c00 	.word	0x40010c00
 8002a30:	40011000 	.word	0x40011000
 8002a34:	40011400 	.word	0x40011400
 8002a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	4909      	ldr	r1, [pc, #36]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f47f ae8e 	bne.w	800277c <HAL_GPIO_Init+0x14>
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	372c      	adds	r7, #44	; 0x2c
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e272      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8087 	beq.w	8002b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x12c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d168      	bne.n	8002b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e24c      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x76>
 8002ad8:	4b80      	ldr	r3, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7f      	ldr	r2, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e02e      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0xbc>
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a71      	ldr	r2, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b2c:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fe96 	bl	800187c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe fe92 	bl	800187c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e200      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xe4>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fe82 	bl	800187c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fe7e 	bl	800187c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1ec      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x10c>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fe37 	bl	800187c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fe33 	bl	800187c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4927      	ldr	r1, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fe16 	bl	800187c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c54:	f7fe fe12 	bl	800187c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e180      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fdf6 	bl	800187c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fdf2 	bl	800187c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e160      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 face 	bl	8003254 <RCC_Delay>
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fddc 	bl	800187c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fe fdd8 	bl	800187c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e146      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	42420000 	.word	0x42420000
 8002ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e9      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fd99 	bl	800187c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe fd95 	bl	800187c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e103      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x312>
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e02d      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x334>
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e01c      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x356>
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fd49 	bl	800187c <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe fd45 	bl	800187c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0b1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCC_OscConfig+0x37e>
 8002e10:	e014      	b.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fe fd33 	bl	800187c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fd2f 	bl	800187c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09b      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d061      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d146      	bne.n	8002efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fd03 	bl	800187c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fcff 	bl	800187c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e06d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a19      	ldr	r1, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fcd3 	bl	800187c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fccf 	bl	800187c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x46a>
 8002ef8:	e035      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fcbc 	bl	800187c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fcb8 	bl	800187c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e026      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x498>
 8002f26:	e01e      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e019      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x500>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe fc0a 	bl	800187c <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fc06 	bl	800187c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fb68 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	08004354 	.word	0x08004354
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x30>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x36>
 8003176:	e027      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800317a:	613b      	str	r3, [r7, #16]
      break;
 800317c:	e027      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
 800318a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0c5b      	lsrs	r3, r3, #17
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a2:	5cd3      	ldrb	r3, [r2, r3]
 80031a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031aa:	fb03 f202 	mul.w	r2, r3, r2
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e004      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	613b      	str	r3, [r7, #16]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ca:	613b      	str	r3, [r7, #16]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	693b      	ldr	r3, [r7, #16]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	007a1200 	.word	0x007a1200
 80031e4:	0800436c 	.word	0x0800436c
 80031e8:	0800437c 	.word	0x0800437c
 80031ec:	003d0900 	.word	0x003d0900

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <HAL_RCC_GetHCLKFreq+0x10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000000 	.word	0x20000000

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff2 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08004364 	.word	0x08004364

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffde 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0adb      	lsrs	r3, r3, #11
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	08004364 	.word	0x08004364

08003254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <RCC_Delay+0x34>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <RCC_Delay+0x38>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0a5b      	lsrs	r3, r3, #9
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003270:	bf00      	nop
  }
  while (Delay --);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e5a      	subs	r2, r3, #1
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f9      	bne.n	8003270 <RCC_Delay+0x1c>
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	20000000 	.word	0x20000000
 800328c:	10624dd3 	.word	0x10624dd3

08003290 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d07d      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b0:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	61d3      	str	r3, [r2, #28]
 80032c8:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d118      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e4:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f0:	f7fe fac4 	bl	800187c <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe fac0 	bl	800187c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e06d      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003316:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d027      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333e:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003344:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800334a:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fa8f 	bl	800187c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fe fa8b 	bl	800187c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e036      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ee      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4917      	ldr	r1, [pc, #92]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	4313      	orrs	r3, r2
 8003394:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	490b      	ldr	r1, [pc, #44]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420440 	.word	0x42420440

080033fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b10      	cmp	r3, #16
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b10      	cmp	r3, #16
 8003422:	f200 808a 	bhi.w	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d045      	beq.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d075      	beq.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003432:	e082      	b.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003434:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07b      	beq.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	4a41      	ldr	r2, [pc, #260]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003450:	5cd3      	ldrb	r3, [r2, r3]
 8003452:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800345e:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	0c5b      	lsrs	r3, r3, #17
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4a34      	ldr	r2, [pc, #208]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a0:	d102      	bne.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	61bb      	str	r3, [r7, #24]
      break;
 80034a6:	e04a      	b.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	61bb      	str	r3, [r7, #24]
      break;
 80034b6:	e042      	b.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c8:	d108      	bne.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80034d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e01f      	b.n	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e6:	d109      	bne.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80034f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e00f      	b.n	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003506:	d11c      	bne.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003514:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003518:	61bb      	str	r3, [r7, #24]
      break;
 800351a:	e012      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800351c:	e011      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800351e:	f7ff fe85 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0b9b      	lsrs	r3, r3, #14
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	61bb      	str	r3, [r7, #24]
      break;
 8003538:	e004      	b.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003542:	bf00      	nop
    }
  }
  return (frequency);
 8003544:	69bb      	ldr	r3, [r7, #24]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	08004380 	.word	0x08004380
 8003558:	08004390 	.word	0x08004390
 800355c:	007a1200 	.word	0x007a1200
 8003560:	003d0900 	.word	0x003d0900
 8003564:	aaaaaaab 	.word	0xaaaaaaab

08003568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e042      	b.n	8003600 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe f84a 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	; 0x24
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f971 	bl	8003894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	d175      	bne.n	8003714 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_UART_Transmit+0x2c>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e06e      	b.n	8003716 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2221      	movs	r2, #33	; 0x21
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003646:	f7fe f919 	bl	800187c <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003660:	d108      	bne.n	8003674 <HAL_UART_Transmit+0x6c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d104      	bne.n	8003674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e003      	b.n	800367c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800367c:	e02e      	b.n	80036dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f848 	bl	800371e <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e03a      	b.n	8003716 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3302      	adds	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	e007      	b.n	80036ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3301      	adds	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1cb      	bne.n	800367e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f814 	bl	800371e <UART_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e006      	b.n	8003716 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	e03b      	b.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003736:	d037      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7fe f8a0 	bl	800187c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <UART_WaitOnFlagUntilTimeout+0x30>
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e03a      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d023      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d020      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d01d      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d116      	bne.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f81d 	bl	80037d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2208      	movs	r2, #8
 800379a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e00f      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d0b4      	beq.n	8003730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b095      	sub	sp, #84	; 0x54
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f8:	643a      	str	r2, [r7, #64]	; 0x40
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	61fb      	str	r3, [r7, #28]
   return(result);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800382c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b01      	cmp	r3, #1
 8003846:	d119      	bne.n	800387c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	60bb      	str	r3, [r7, #8]
   return(result);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f023 0310 	bic.w	r3, r3, #16
 800385e:	647b      	str	r3, [r7, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003868:	61ba      	str	r2, [r7, #24]
 800386a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	613b      	str	r3, [r7, #16]
   return(result);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
}
 800388a:	bf00      	nop
 800388c:	3754      	adds	r7, #84	; 0x54
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ce:	f023 030c 	bic.w	r3, r3, #12
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	430b      	orrs	r3, r1
 80038da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2c      	ldr	r2, [pc, #176]	; (80039a8 <UART_SetConfig+0x114>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038fc:	f7ff fc96 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	e002      	b.n	800390a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7ff fc7e 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8003908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009a      	lsls	r2, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <UART_SetConfig+0x118>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	0119      	lsls	r1, r3, #4
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003940:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <UART_SetConfig+0x118>)
 8003942:	fba3 0302 	umull	r0, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2064      	movs	r0, #100	; 0x64
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	3332      	adds	r3, #50	; 0x32
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <UART_SetConfig+0x118>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	4419      	add	r1, r3
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <UART_SetConfig+0x118>)
 800397a:	fba3 0302 	umull	r0, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2064      	movs	r0, #100	; 0x64
 8003982:	fb00 f303 	mul.w	r3, r0, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	3332      	adds	r3, #50	; 0x32
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <UART_SetConfig+0x118>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	440a      	add	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40013800 	.word	0x40013800
 80039ac:	51eb851f 	.word	0x51eb851f

080039b0 <__errno>:
 80039b0:	4b01      	ldr	r3, [pc, #4]	; (80039b8 <__errno+0x8>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	2000000c 	.word	0x2000000c

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	2600      	movs	r6, #0
 80039c0:	4d0c      	ldr	r5, [pc, #48]	; (80039f4 <__libc_init_array+0x38>)
 80039c2:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	f000 fcb0 	bl	8004330 <_init>
 80039d0:	2600      	movs	r6, #0
 80039d2:	4d0a      	ldr	r5, [pc, #40]	; (80039fc <__libc_init_array+0x40>)
 80039d4:	4c0a      	ldr	r4, [pc, #40]	; (8003a00 <__libc_init_array+0x44>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	080043c8 	.word	0x080043c8
 80039f8:	080043c8 	.word	0x080043c8
 80039fc:	080043c8 	.word	0x080043c8
 8003a00:	080043cc 	.word	0x080043cc

08003a04 <memset>:
 8003a04:	4603      	mov	r3, r0
 8003a06:	4402      	add	r2, r0
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <memset+0xa>
 8003a0c:	4770      	bx	lr
 8003a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a12:	e7f9      	b.n	8003a08 <memset+0x4>

08003a14 <sniprintf>:
 8003a14:	b40c      	push	{r2, r3}
 8003a16:	b530      	push	{r4, r5, lr}
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <sniprintf+0x64>)
 8003a1a:	1e0c      	subs	r4, r1, #0
 8003a1c:	681d      	ldr	r5, [r3, #0]
 8003a1e:	b09d      	sub	sp, #116	; 0x74
 8003a20:	da08      	bge.n	8003a34 <sniprintf+0x20>
 8003a22:	238b      	movs	r3, #139	; 0x8b
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a28:	602b      	str	r3, [r5, #0]
 8003a2a:	b01d      	add	sp, #116	; 0x74
 8003a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a30:	b002      	add	sp, #8
 8003a32:	4770      	bx	lr
 8003a34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a3c:	bf0c      	ite	eq
 8003a3e:	4623      	moveq	r3, r4
 8003a40:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	9307      	str	r3, [sp, #28]
 8003a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a4c:	9002      	str	r0, [sp, #8]
 8003a4e:	9006      	str	r0, [sp, #24]
 8003a50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a54:	4628      	mov	r0, r5
 8003a56:	ab21      	add	r3, sp, #132	; 0x84
 8003a58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a5a:	a902      	add	r1, sp, #8
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	f000 f869 	bl	8003b34 <_svfiprintf_r>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	bfbc      	itt	lt
 8003a66:	238b      	movlt	r3, #139	; 0x8b
 8003a68:	602b      	strlt	r3, [r5, #0]
 8003a6a:	2c00      	cmp	r4, #0
 8003a6c:	d0dd      	beq.n	8003a2a <sniprintf+0x16>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	9b02      	ldr	r3, [sp, #8]
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e7d9      	b.n	8003a2a <sniprintf+0x16>
 8003a76:	bf00      	nop
 8003a78:	2000000c 	.word	0x2000000c

08003a7c <__ssputs_r>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	688e      	ldr	r6, [r1, #8]
 8003a82:	4682      	mov	sl, r0
 8003a84:	429e      	cmp	r6, r3
 8003a86:	460c      	mov	r4, r1
 8003a88:	4690      	mov	r8, r2
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	d838      	bhi.n	8003b00 <__ssputs_r+0x84>
 8003a8e:	898a      	ldrh	r2, [r1, #12]
 8003a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a94:	d032      	beq.n	8003afc <__ssputs_r+0x80>
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	6909      	ldr	r1, [r1, #16]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	eba5 0901 	sub.w	r9, r5, r1
 8003aa0:	6965      	ldr	r5, [r4, #20]
 8003aa2:	444b      	add	r3, r9
 8003aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aac:	106d      	asrs	r5, r5, #1
 8003aae:	429d      	cmp	r5, r3
 8003ab0:	bf38      	it	cc
 8003ab2:	461d      	movcc	r5, r3
 8003ab4:	0553      	lsls	r3, r2, #21
 8003ab6:	d531      	bpl.n	8003b1c <__ssputs_r+0xa0>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f000 fb6f 	bl	800419c <_malloc_r>
 8003abe:	4606      	mov	r6, r0
 8003ac0:	b950      	cbnz	r0, 8003ad8 <__ssputs_r+0x5c>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac8:	f8ca 3000 	str.w	r3, [sl]
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	464a      	mov	r2, r9
 8003ada:	6921      	ldr	r1, [r4, #16]
 8003adc:	f000 face 	bl	800407c <memcpy>
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	6126      	str	r6, [r4, #16]
 8003aee:	444e      	add	r6, r9
 8003af0:	6026      	str	r6, [r4, #0]
 8003af2:	463e      	mov	r6, r7
 8003af4:	6165      	str	r5, [r4, #20]
 8003af6:	eba5 0509 	sub.w	r5, r5, r9
 8003afa:	60a5      	str	r5, [r4, #8]
 8003afc:	42be      	cmp	r6, r7
 8003afe:	d900      	bls.n	8003b02 <__ssputs_r+0x86>
 8003b00:	463e      	mov	r6, r7
 8003b02:	4632      	mov	r2, r6
 8003b04:	4641      	mov	r1, r8
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	f000 fac6 	bl	8004098 <memmove>
 8003b0c:	68a3      	ldr	r3, [r4, #8]
 8003b0e:	2000      	movs	r0, #0
 8003b10:	1b9b      	subs	r3, r3, r6
 8003b12:	60a3      	str	r3, [r4, #8]
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4433      	add	r3, r6
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	e7db      	b.n	8003ad4 <__ssputs_r+0x58>
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	f000 fbb1 	bl	8004284 <_realloc_r>
 8003b22:	4606      	mov	r6, r0
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d1e1      	bne.n	8003aec <__ssputs_r+0x70>
 8003b28:	4650      	mov	r0, sl
 8003b2a:	6921      	ldr	r1, [r4, #16]
 8003b2c:	f000 face 	bl	80040cc <_free_r>
 8003b30:	e7c7      	b.n	8003ac2 <__ssputs_r+0x46>
	...

08003b34 <_svfiprintf_r>:
 8003b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b38:	4698      	mov	r8, r3
 8003b3a:	898b      	ldrh	r3, [r1, #12]
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	460d      	mov	r5, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	b09d      	sub	sp, #116	; 0x74
 8003b46:	d50e      	bpl.n	8003b66 <_svfiprintf_r+0x32>
 8003b48:	690b      	ldr	r3, [r1, #16]
 8003b4a:	b963      	cbnz	r3, 8003b66 <_svfiprintf_r+0x32>
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	f000 fb25 	bl	800419c <_malloc_r>
 8003b52:	6028      	str	r0, [r5, #0]
 8003b54:	6128      	str	r0, [r5, #16]
 8003b56:	b920      	cbnz	r0, 8003b62 <_svfiprintf_r+0x2e>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b60:	e0d1      	b.n	8003d06 <_svfiprintf_r+0x1d2>
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	616b      	str	r3, [r5, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b70:	2330      	movs	r3, #48	; 0x30
 8003b72:	f04f 0901 	mov.w	r9, #1
 8003b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d20 <_svfiprintf_r+0x1ec>
 8003b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b82:	4623      	mov	r3, r4
 8003b84:	469a      	mov	sl, r3
 8003b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8a:	b10a      	cbz	r2, 8003b90 <_svfiprintf_r+0x5c>
 8003b8c:	2a25      	cmp	r2, #37	; 0x25
 8003b8e:	d1f9      	bne.n	8003b84 <_svfiprintf_r+0x50>
 8003b90:	ebba 0b04 	subs.w	fp, sl, r4
 8003b94:	d00b      	beq.n	8003bae <_svfiprintf_r+0x7a>
 8003b96:	465b      	mov	r3, fp
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f7ff ff6d 	bl	8003a7c <__ssputs_r>
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f000 80aa 	beq.w	8003cfc <_svfiprintf_r+0x1c8>
 8003ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003baa:	445a      	add	r2, fp
 8003bac:	9209      	str	r2, [sp, #36]	; 0x24
 8003bae:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80a2 	beq.w	8003cfc <_svfiprintf_r+0x1c8>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc2:	f10a 0a01 	add.w	sl, sl, #1
 8003bc6:	9304      	str	r3, [sp, #16]
 8003bc8:	9307      	str	r3, [sp, #28]
 8003bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bce:	931a      	str	r3, [sp, #104]	; 0x68
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd8:	4851      	ldr	r0, [pc, #324]	; (8003d20 <_svfiprintf_r+0x1ec>)
 8003bda:	f000 fa41 	bl	8004060 <memchr>
 8003bde:	9a04      	ldr	r2, [sp, #16]
 8003be0:	b9d8      	cbnz	r0, 8003c1a <_svfiprintf_r+0xe6>
 8003be2:	06d0      	lsls	r0, r2, #27
 8003be4:	bf44      	itt	mi
 8003be6:	2320      	movmi	r3, #32
 8003be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bec:	0711      	lsls	r1, r2, #28
 8003bee:	bf44      	itt	mi
 8003bf0:	232b      	movmi	r3, #43	; 0x2b
 8003bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfc:	d015      	beq.n	8003c2a <_svfiprintf_r+0xf6>
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2000      	movs	r0, #0
 8003c02:	f04f 0c0a 	mov.w	ip, #10
 8003c06:	9a07      	ldr	r2, [sp, #28]
 8003c08:	4621      	mov	r1, r4
 8003c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0e:	3b30      	subs	r3, #48	; 0x30
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d94e      	bls.n	8003cb2 <_svfiprintf_r+0x17e>
 8003c14:	b1b0      	cbz	r0, 8003c44 <_svfiprintf_r+0x110>
 8003c16:	9207      	str	r2, [sp, #28]
 8003c18:	e014      	b.n	8003c44 <_svfiprintf_r+0x110>
 8003c1a:	eba0 0308 	sub.w	r3, r0, r8
 8003c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	46a2      	mov	sl, r4
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	e7d2      	b.n	8003bd0 <_svfiprintf_r+0x9c>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9103      	str	r1, [sp, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bfbb      	ittet	lt
 8003c36:	425b      	neglt	r3, r3
 8003c38:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3c:	9307      	strge	r3, [sp, #28]
 8003c3e:	9307      	strlt	r3, [sp, #28]
 8003c40:	bfb8      	it	lt
 8003c42:	9204      	strlt	r2, [sp, #16]
 8003c44:	7823      	ldrb	r3, [r4, #0]
 8003c46:	2b2e      	cmp	r3, #46	; 0x2e
 8003c48:	d10c      	bne.n	8003c64 <_svfiprintf_r+0x130>
 8003c4a:	7863      	ldrb	r3, [r4, #1]
 8003c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4e:	d135      	bne.n	8003cbc <_svfiprintf_r+0x188>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	3402      	adds	r4, #2
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9203      	str	r2, [sp, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfb8      	it	lt
 8003c5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d24 <_svfiprintf_r+0x1f0>
 8003c68:	2203      	movs	r2, #3
 8003c6a:	4650      	mov	r0, sl
 8003c6c:	7821      	ldrb	r1, [r4, #0]
 8003c6e:	f000 f9f7 	bl	8004060 <memchr>
 8003c72:	b140      	cbz	r0, 8003c86 <_svfiprintf_r+0x152>
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	eba0 000a 	sub.w	r0, r0, sl
 8003c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c7e:	9b04      	ldr	r3, [sp, #16]
 8003c80:	3401      	adds	r4, #1
 8003c82:	4303      	orrs	r3, r0
 8003c84:	9304      	str	r3, [sp, #16]
 8003c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8a:	2206      	movs	r2, #6
 8003c8c:	4826      	ldr	r0, [pc, #152]	; (8003d28 <_svfiprintf_r+0x1f4>)
 8003c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c92:	f000 f9e5 	bl	8004060 <memchr>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d038      	beq.n	8003d0c <_svfiprintf_r+0x1d8>
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <_svfiprintf_r+0x1f8>)
 8003c9c:	bb1b      	cbnz	r3, 8003ce6 <_svfiprintf_r+0x1b2>
 8003c9e:	9b03      	ldr	r3, [sp, #12]
 8003ca0:	3307      	adds	r3, #7
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	9303      	str	r3, [sp, #12]
 8003caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cac:	4433      	add	r3, r6
 8003cae:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb0:	e767      	b.n	8003b82 <_svfiprintf_r+0x4e>
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cba:	e7a5      	b.n	8003c08 <_svfiprintf_r+0xd4>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f04f 0c0a 	mov.w	ip, #10
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	3401      	adds	r4, #1
 8003cc6:	9305      	str	r3, [sp, #20]
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cce:	3a30      	subs	r2, #48	; 0x30
 8003cd0:	2a09      	cmp	r2, #9
 8003cd2:	d903      	bls.n	8003cdc <_svfiprintf_r+0x1a8>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0c5      	beq.n	8003c64 <_svfiprintf_r+0x130>
 8003cd8:	9105      	str	r1, [sp, #20]
 8003cda:	e7c3      	b.n	8003c64 <_svfiprintf_r+0x130>
 8003cdc:	4604      	mov	r4, r0
 8003cde:	2301      	movs	r3, #1
 8003ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce4:	e7f0      	b.n	8003cc8 <_svfiprintf_r+0x194>
 8003ce6:	ab03      	add	r3, sp, #12
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	462a      	mov	r2, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <_svfiprintf_r+0x1fc>)
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	f3af 8000 	nop.w
 8003cf6:	1c42      	adds	r2, r0, #1
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	d1d6      	bne.n	8003caa <_svfiprintf_r+0x176>
 8003cfc:	89ab      	ldrh	r3, [r5, #12]
 8003cfe:	065b      	lsls	r3, r3, #25
 8003d00:	f53f af2c 	bmi.w	8003b5c <_svfiprintf_r+0x28>
 8003d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d06:	b01d      	add	sp, #116	; 0x74
 8003d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0c:	ab03      	add	r3, sp, #12
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	462a      	mov	r2, r5
 8003d12:	4638      	mov	r0, r7
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <_svfiprintf_r+0x1fc>)
 8003d16:	a904      	add	r1, sp, #16
 8003d18:	f000 f87c 	bl	8003e14 <_printf_i>
 8003d1c:	e7eb      	b.n	8003cf6 <_svfiprintf_r+0x1c2>
 8003d1e:	bf00      	nop
 8003d20:	08004392 	.word	0x08004392
 8003d24:	08004398 	.word	0x08004398
 8003d28:	0800439c 	.word	0x0800439c
 8003d2c:	00000000 	.word	0x00000000
 8003d30:	08003a7d 	.word	0x08003a7d

08003d34 <_printf_common>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	4616      	mov	r6, r2
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	688a      	ldr	r2, [r1, #8]
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	4607      	mov	r7, r0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bfb8      	it	lt
 8003d46:	4613      	movlt	r3, r2
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d4e:	460c      	mov	r4, r1
 8003d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d54:	b10a      	cbz	r2, 8003d5a <_printf_common+0x26>
 8003d56:	3301      	adds	r3, #1
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	0699      	lsls	r1, r3, #26
 8003d5e:	bf42      	ittt	mi
 8003d60:	6833      	ldrmi	r3, [r6, #0]
 8003d62:	3302      	addmi	r3, #2
 8003d64:	6033      	strmi	r3, [r6, #0]
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	f015 0506 	ands.w	r5, r5, #6
 8003d6c:	d106      	bne.n	8003d7c <_printf_common+0x48>
 8003d6e:	f104 0a19 	add.w	sl, r4, #25
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	6832      	ldr	r2, [r6, #0]
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	42ab      	cmp	r3, r5
 8003d7a:	dc28      	bgt.n	8003dce <_printf_common+0x9a>
 8003d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d80:	1e13      	subs	r3, r2, #0
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	bf18      	it	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	0692      	lsls	r2, r2, #26
 8003d8a:	d42d      	bmi.n	8003de8 <_printf_common+0xb4>
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d94:	47c0      	blx	r8
 8003d96:	3001      	adds	r0, #1
 8003d98:	d020      	beq.n	8003ddc <_printf_common+0xa8>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	68e5      	ldr	r5, [r4, #12]
 8003d9e:	f003 0306 	and.w	r3, r3, #6
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf18      	it	ne
 8003da6:	2500      	movne	r5, #0
 8003da8:	6832      	ldr	r2, [r6, #0]
 8003daa:	f04f 0600 	mov.w	r6, #0
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	bf08      	it	eq
 8003db2:	1aad      	subeq	r5, r5, r2
 8003db4:	6922      	ldr	r2, [r4, #16]
 8003db6:	bf08      	it	eq
 8003db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bfc4      	itt	gt
 8003dc0:	1a9b      	subgt	r3, r3, r2
 8003dc2:	18ed      	addgt	r5, r5, r3
 8003dc4:	341a      	adds	r4, #26
 8003dc6:	42b5      	cmp	r5, r6
 8003dc8:	d11a      	bne.n	8003e00 <_printf_common+0xcc>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e008      	b.n	8003de0 <_printf_common+0xac>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	47c0      	blx	r8
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d103      	bne.n	8003de4 <_printf_common+0xb0>
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	3501      	adds	r5, #1
 8003de6:	e7c4      	b.n	8003d72 <_printf_common+0x3e>
 8003de8:	2030      	movs	r0, #48	; 0x30
 8003dea:	18e1      	adds	r1, r4, r3
 8003dec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df6:	4422      	add	r2, r4
 8003df8:	3302      	adds	r3, #2
 8003dfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dfe:	e7c5      	b.n	8003d8c <_printf_common+0x58>
 8003e00:	2301      	movs	r3, #1
 8003e02:	4622      	mov	r2, r4
 8003e04:	4649      	mov	r1, r9
 8003e06:	4638      	mov	r0, r7
 8003e08:	47c0      	blx	r8
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d0e6      	beq.n	8003ddc <_printf_common+0xa8>
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7d9      	b.n	8003dc6 <_printf_common+0x92>
	...

08003e14 <_printf_i>:
 8003e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	7e0f      	ldrb	r7, [r1, #24]
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	2f78      	cmp	r7, #120	; 0x78
 8003e1e:	4680      	mov	r8, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	469a      	mov	sl, r3
 8003e24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e2a:	d807      	bhi.n	8003e3c <_printf_i+0x28>
 8003e2c:	2f62      	cmp	r7, #98	; 0x62
 8003e2e:	d80a      	bhi.n	8003e46 <_printf_i+0x32>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	f000 80d9 	beq.w	8003fe8 <_printf_i+0x1d4>
 8003e36:	2f58      	cmp	r7, #88	; 0x58
 8003e38:	f000 80a4 	beq.w	8003f84 <_printf_i+0x170>
 8003e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e44:	e03a      	b.n	8003ebc <_printf_i+0xa8>
 8003e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e4a:	2b15      	cmp	r3, #21
 8003e4c:	d8f6      	bhi.n	8003e3c <_printf_i+0x28>
 8003e4e:	a101      	add	r1, pc, #4	; (adr r1, 8003e54 <_printf_i+0x40>)
 8003e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003ec1 	.word	0x08003ec1
 8003e5c:	08003e3d 	.word	0x08003e3d
 8003e60:	08003e3d 	.word	0x08003e3d
 8003e64:	08003e3d 	.word	0x08003e3d
 8003e68:	08003e3d 	.word	0x08003e3d
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003e3d 	.word	0x08003e3d
 8003e74:	08003e3d 	.word	0x08003e3d
 8003e78:	08003e3d 	.word	0x08003e3d
 8003e7c:	08003e3d 	.word	0x08003e3d
 8003e80:	08003fcf 	.word	0x08003fcf
 8003e84:	08003ef1 	.word	0x08003ef1
 8003e88:	08003fb1 	.word	0x08003fb1
 8003e8c:	08003e3d 	.word	0x08003e3d
 8003e90:	08003e3d 	.word	0x08003e3d
 8003e94:	08003ff1 	.word	0x08003ff1
 8003e98:	08003e3d 	.word	0x08003e3d
 8003e9c:	08003ef1 	.word	0x08003ef1
 8003ea0:	08003e3d 	.word	0x08003e3d
 8003ea4:	08003e3d 	.word	0x08003e3d
 8003ea8:	08003fb9 	.word	0x08003fb9
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	602a      	str	r2, [r5, #0]
 8003eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0a4      	b.n	800400a <_printf_i+0x1f6>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	6829      	ldr	r1, [r5, #0]
 8003ec4:	0606      	lsls	r6, r0, #24
 8003ec6:	f101 0304 	add.w	r3, r1, #4
 8003eca:	d50a      	bpl.n	8003ee2 <_printf_i+0xce>
 8003ecc:	680e      	ldr	r6, [r1, #0]
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	2e00      	cmp	r6, #0
 8003ed2:	da03      	bge.n	8003edc <_printf_i+0xc8>
 8003ed4:	232d      	movs	r3, #45	; 0x2d
 8003ed6:	4276      	negs	r6, r6
 8003ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003edc:	230a      	movs	r3, #10
 8003ede:	485e      	ldr	r0, [pc, #376]	; (8004058 <_printf_i+0x244>)
 8003ee0:	e019      	b.n	8003f16 <_printf_i+0x102>
 8003ee2:	680e      	ldr	r6, [r1, #0]
 8003ee4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ee8:	602b      	str	r3, [r5, #0]
 8003eea:	bf18      	it	ne
 8003eec:	b236      	sxthne	r6, r6
 8003eee:	e7ef      	b.n	8003ed0 <_printf_i+0xbc>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	6820      	ldr	r0, [r4, #0]
 8003ef4:	1d19      	adds	r1, r3, #4
 8003ef6:	6029      	str	r1, [r5, #0]
 8003ef8:	0601      	lsls	r1, r0, #24
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0xec>
 8003efc:	681e      	ldr	r6, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0xf2>
 8003f00:	0646      	lsls	r6, r0, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0xe8>
 8003f04:	881e      	ldrh	r6, [r3, #0]
 8003f06:	2f6f      	cmp	r7, #111	; 0x6f
 8003f08:	bf0c      	ite	eq
 8003f0a:	2308      	moveq	r3, #8
 8003f0c:	230a      	movne	r3, #10
 8003f0e:	4852      	ldr	r0, [pc, #328]	; (8004058 <_printf_i+0x244>)
 8003f10:	2100      	movs	r1, #0
 8003f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f16:	6865      	ldr	r5, [r4, #4]
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	bfa8      	it	ge
 8003f1c:	6821      	ldrge	r1, [r4, #0]
 8003f1e:	60a5      	str	r5, [r4, #8]
 8003f20:	bfa4      	itt	ge
 8003f22:	f021 0104 	bicge.w	r1, r1, #4
 8003f26:	6021      	strge	r1, [r4, #0]
 8003f28:	b90e      	cbnz	r6, 8003f2e <_printf_i+0x11a>
 8003f2a:	2d00      	cmp	r5, #0
 8003f2c:	d04d      	beq.n	8003fca <_printf_i+0x1b6>
 8003f2e:	4615      	mov	r5, r2
 8003f30:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f34:	fb03 6711 	mls	r7, r3, r1, r6
 8003f38:	5dc7      	ldrb	r7, [r0, r7]
 8003f3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f3e:	4637      	mov	r7, r6
 8003f40:	42bb      	cmp	r3, r7
 8003f42:	460e      	mov	r6, r1
 8003f44:	d9f4      	bls.n	8003f30 <_printf_i+0x11c>
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d10b      	bne.n	8003f62 <_printf_i+0x14e>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	07de      	lsls	r6, r3, #31
 8003f4e:	d508      	bpl.n	8003f62 <_printf_i+0x14e>
 8003f50:	6923      	ldr	r3, [r4, #16]
 8003f52:	6861      	ldr	r1, [r4, #4]
 8003f54:	4299      	cmp	r1, r3
 8003f56:	bfde      	ittt	le
 8003f58:	2330      	movle	r3, #48	; 0x30
 8003f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f5e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f62:	1b52      	subs	r2, r2, r5
 8003f64:	6122      	str	r2, [r4, #16]
 8003f66:	464b      	mov	r3, r9
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f8cd a000 	str.w	sl, [sp]
 8003f70:	aa03      	add	r2, sp, #12
 8003f72:	f7ff fedf 	bl	8003d34 <_printf_common>
 8003f76:	3001      	adds	r0, #1
 8003f78:	d14c      	bne.n	8004014 <_printf_i+0x200>
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7e:	b004      	add	sp, #16
 8003f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f84:	4834      	ldr	r0, [pc, #208]	; (8004058 <_printf_i+0x244>)
 8003f86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f8a:	6829      	ldr	r1, [r5, #0]
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f92:	6029      	str	r1, [r5, #0]
 8003f94:	061d      	lsls	r5, r3, #24
 8003f96:	d514      	bpl.n	8003fc2 <_printf_i+0x1ae>
 8003f98:	07df      	lsls	r7, r3, #31
 8003f9a:	bf44      	itt	mi
 8003f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003fa0:	6023      	strmi	r3, [r4, #0]
 8003fa2:	b91e      	cbnz	r6, 8003fac <_printf_i+0x198>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f023 0320 	bic.w	r3, r3, #32
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	2310      	movs	r3, #16
 8003fae:	e7af      	b.n	8003f10 <_printf_i+0xfc>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	f043 0320 	orr.w	r3, r3, #32
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	2378      	movs	r3, #120	; 0x78
 8003fba:	4828      	ldr	r0, [pc, #160]	; (800405c <_printf_i+0x248>)
 8003fbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fc0:	e7e3      	b.n	8003f8a <_printf_i+0x176>
 8003fc2:	0659      	lsls	r1, r3, #25
 8003fc4:	bf48      	it	mi
 8003fc6:	b2b6      	uxthmi	r6, r6
 8003fc8:	e7e6      	b.n	8003f98 <_printf_i+0x184>
 8003fca:	4615      	mov	r5, r2
 8003fcc:	e7bb      	b.n	8003f46 <_printf_i+0x132>
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	6826      	ldr	r6, [r4, #0]
 8003fd2:	1d18      	adds	r0, r3, #4
 8003fd4:	6961      	ldr	r1, [r4, #20]
 8003fd6:	6028      	str	r0, [r5, #0]
 8003fd8:	0635      	lsls	r5, r6, #24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	d501      	bpl.n	8003fe2 <_printf_i+0x1ce>
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	e002      	b.n	8003fe8 <_printf_i+0x1d4>
 8003fe2:	0670      	lsls	r0, r6, #25
 8003fe4:	d5fb      	bpl.n	8003fde <_printf_i+0x1ca>
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4615      	mov	r5, r2
 8003fec:	6123      	str	r3, [r4, #16]
 8003fee:	e7ba      	b.n	8003f66 <_printf_i+0x152>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	602a      	str	r2, [r5, #0]
 8003ff8:	681d      	ldr	r5, [r3, #0]
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 f82f 	bl	8004060 <memchr>
 8004002:	b108      	cbz	r0, 8004008 <_printf_i+0x1f4>
 8004004:	1b40      	subs	r0, r0, r5
 8004006:	6060      	str	r0, [r4, #4]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	2300      	movs	r3, #0
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004012:	e7a8      	b.n	8003f66 <_printf_i+0x152>
 8004014:	462a      	mov	r2, r5
 8004016:	4649      	mov	r1, r9
 8004018:	4640      	mov	r0, r8
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	47d0      	blx	sl
 800401e:	3001      	adds	r0, #1
 8004020:	d0ab      	beq.n	8003f7a <_printf_i+0x166>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	079b      	lsls	r3, r3, #30
 8004026:	d413      	bmi.n	8004050 <_printf_i+0x23c>
 8004028:	68e0      	ldr	r0, [r4, #12]
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	4298      	cmp	r0, r3
 800402e:	bfb8      	it	lt
 8004030:	4618      	movlt	r0, r3
 8004032:	e7a4      	b.n	8003f7e <_printf_i+0x16a>
 8004034:	2301      	movs	r3, #1
 8004036:	4632      	mov	r2, r6
 8004038:	4649      	mov	r1, r9
 800403a:	4640      	mov	r0, r8
 800403c:	47d0      	blx	sl
 800403e:	3001      	adds	r0, #1
 8004040:	d09b      	beq.n	8003f7a <_printf_i+0x166>
 8004042:	3501      	adds	r5, #1
 8004044:	68e3      	ldr	r3, [r4, #12]
 8004046:	9903      	ldr	r1, [sp, #12]
 8004048:	1a5b      	subs	r3, r3, r1
 800404a:	42ab      	cmp	r3, r5
 800404c:	dcf2      	bgt.n	8004034 <_printf_i+0x220>
 800404e:	e7eb      	b.n	8004028 <_printf_i+0x214>
 8004050:	2500      	movs	r5, #0
 8004052:	f104 0619 	add.w	r6, r4, #25
 8004056:	e7f5      	b.n	8004044 <_printf_i+0x230>
 8004058:	080043a3 	.word	0x080043a3
 800405c:	080043b4 	.word	0x080043b4

08004060 <memchr>:
 8004060:	4603      	mov	r3, r0
 8004062:	b510      	push	{r4, lr}
 8004064:	b2c9      	uxtb	r1, r1
 8004066:	4402      	add	r2, r0
 8004068:	4293      	cmp	r3, r2
 800406a:	4618      	mov	r0, r3
 800406c:	d101      	bne.n	8004072 <memchr+0x12>
 800406e:	2000      	movs	r0, #0
 8004070:	e003      	b.n	800407a <memchr+0x1a>
 8004072:	7804      	ldrb	r4, [r0, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	428c      	cmp	r4, r1
 8004078:	d1f6      	bne.n	8004068 <memchr+0x8>
 800407a:	bd10      	pop	{r4, pc}

0800407c <memcpy>:
 800407c:	440a      	add	r2, r1
 800407e:	4291      	cmp	r1, r2
 8004080:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004084:	d100      	bne.n	8004088 <memcpy+0xc>
 8004086:	4770      	bx	lr
 8004088:	b510      	push	{r4, lr}
 800408a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800408e:	4291      	cmp	r1, r2
 8004090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004094:	d1f9      	bne.n	800408a <memcpy+0xe>
 8004096:	bd10      	pop	{r4, pc}

08004098 <memmove>:
 8004098:	4288      	cmp	r0, r1
 800409a:	b510      	push	{r4, lr}
 800409c:	eb01 0402 	add.w	r4, r1, r2
 80040a0:	d902      	bls.n	80040a8 <memmove+0x10>
 80040a2:	4284      	cmp	r4, r0
 80040a4:	4623      	mov	r3, r4
 80040a6:	d807      	bhi.n	80040b8 <memmove+0x20>
 80040a8:	1e43      	subs	r3, r0, #1
 80040aa:	42a1      	cmp	r1, r4
 80040ac:	d008      	beq.n	80040c0 <memmove+0x28>
 80040ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040b6:	e7f8      	b.n	80040aa <memmove+0x12>
 80040b8:	4601      	mov	r1, r0
 80040ba:	4402      	add	r2, r0
 80040bc:	428a      	cmp	r2, r1
 80040be:	d100      	bne.n	80040c2 <memmove+0x2a>
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ca:	e7f7      	b.n	80040bc <memmove+0x24>

080040cc <_free_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4605      	mov	r5, r0
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d040      	beq.n	8004156 <_free_r+0x8a>
 80040d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d8:	1f0c      	subs	r4, r1, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bfb8      	it	lt
 80040de:	18e4      	addlt	r4, r4, r3
 80040e0:	f000 f910 	bl	8004304 <__malloc_lock>
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <_free_r+0x8c>)
 80040e6:	6813      	ldr	r3, [r2, #0]
 80040e8:	b933      	cbnz	r3, 80040f8 <_free_r+0x2c>
 80040ea:	6063      	str	r3, [r4, #4]
 80040ec:	6014      	str	r4, [r2, #0]
 80040ee:	4628      	mov	r0, r5
 80040f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f4:	f000 b90c 	b.w	8004310 <__malloc_unlock>
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	d908      	bls.n	800410e <_free_r+0x42>
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	1821      	adds	r1, r4, r0
 8004100:	428b      	cmp	r3, r1
 8004102:	bf01      	itttt	eq
 8004104:	6819      	ldreq	r1, [r3, #0]
 8004106:	685b      	ldreq	r3, [r3, #4]
 8004108:	1809      	addeq	r1, r1, r0
 800410a:	6021      	streq	r1, [r4, #0]
 800410c:	e7ed      	b.n	80040ea <_free_r+0x1e>
 800410e:	461a      	mov	r2, r3
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	b10b      	cbz	r3, 8004118 <_free_r+0x4c>
 8004114:	42a3      	cmp	r3, r4
 8004116:	d9fa      	bls.n	800410e <_free_r+0x42>
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	1850      	adds	r0, r2, r1
 800411c:	42a0      	cmp	r0, r4
 800411e:	d10b      	bne.n	8004138 <_free_r+0x6c>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	4401      	add	r1, r0
 8004124:	1850      	adds	r0, r2, r1
 8004126:	4283      	cmp	r3, r0
 8004128:	6011      	str	r1, [r2, #0]
 800412a:	d1e0      	bne.n	80040ee <_free_r+0x22>
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4401      	add	r1, r0
 8004132:	6011      	str	r1, [r2, #0]
 8004134:	6053      	str	r3, [r2, #4]
 8004136:	e7da      	b.n	80040ee <_free_r+0x22>
 8004138:	d902      	bls.n	8004140 <_free_r+0x74>
 800413a:	230c      	movs	r3, #12
 800413c:	602b      	str	r3, [r5, #0]
 800413e:	e7d6      	b.n	80040ee <_free_r+0x22>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	1821      	adds	r1, r4, r0
 8004144:	428b      	cmp	r3, r1
 8004146:	bf01      	itttt	eq
 8004148:	6819      	ldreq	r1, [r3, #0]
 800414a:	685b      	ldreq	r3, [r3, #4]
 800414c:	1809      	addeq	r1, r1, r0
 800414e:	6021      	streq	r1, [r4, #0]
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	6054      	str	r4, [r2, #4]
 8004154:	e7cb      	b.n	80040ee <_free_r+0x22>
 8004156:	bd38      	pop	{r3, r4, r5, pc}
 8004158:	2000019c 	.word	0x2000019c

0800415c <sbrk_aligned>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4e0e      	ldr	r6, [pc, #56]	; (8004198 <sbrk_aligned+0x3c>)
 8004160:	460c      	mov	r4, r1
 8004162:	6831      	ldr	r1, [r6, #0]
 8004164:	4605      	mov	r5, r0
 8004166:	b911      	cbnz	r1, 800416e <sbrk_aligned+0x12>
 8004168:	f000 f8bc 	bl	80042e4 <_sbrk_r>
 800416c:	6030      	str	r0, [r6, #0]
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f8b7 	bl	80042e4 <_sbrk_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d00a      	beq.n	8004190 <sbrk_aligned+0x34>
 800417a:	1cc4      	adds	r4, r0, #3
 800417c:	f024 0403 	bic.w	r4, r4, #3
 8004180:	42a0      	cmp	r0, r4
 8004182:	d007      	beq.n	8004194 <sbrk_aligned+0x38>
 8004184:	1a21      	subs	r1, r4, r0
 8004186:	4628      	mov	r0, r5
 8004188:	f000 f8ac 	bl	80042e4 <_sbrk_r>
 800418c:	3001      	adds	r0, #1
 800418e:	d101      	bne.n	8004194 <sbrk_aligned+0x38>
 8004190:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004194:	4620      	mov	r0, r4
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	200001a0 	.word	0x200001a0

0800419c <_malloc_r>:
 800419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	1ccd      	adds	r5, r1, #3
 80041a2:	f025 0503 	bic.w	r5, r5, #3
 80041a6:	3508      	adds	r5, #8
 80041a8:	2d0c      	cmp	r5, #12
 80041aa:	bf38      	it	cc
 80041ac:	250c      	movcc	r5, #12
 80041ae:	2d00      	cmp	r5, #0
 80041b0:	4607      	mov	r7, r0
 80041b2:	db01      	blt.n	80041b8 <_malloc_r+0x1c>
 80041b4:	42a9      	cmp	r1, r5
 80041b6:	d905      	bls.n	80041c4 <_malloc_r+0x28>
 80041b8:	230c      	movs	r3, #12
 80041ba:	2600      	movs	r6, #0
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4630      	mov	r0, r6
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	4e2e      	ldr	r6, [pc, #184]	; (8004280 <_malloc_r+0xe4>)
 80041c6:	f000 f89d 	bl	8004304 <__malloc_lock>
 80041ca:	6833      	ldr	r3, [r6, #0]
 80041cc:	461c      	mov	r4, r3
 80041ce:	bb34      	cbnz	r4, 800421e <_malloc_r+0x82>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4638      	mov	r0, r7
 80041d4:	f7ff ffc2 	bl	800415c <sbrk_aligned>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	4604      	mov	r4, r0
 80041dc:	d14d      	bne.n	800427a <_malloc_r+0xde>
 80041de:	6834      	ldr	r4, [r6, #0]
 80041e0:	4626      	mov	r6, r4
 80041e2:	2e00      	cmp	r6, #0
 80041e4:	d140      	bne.n	8004268 <_malloc_r+0xcc>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	4631      	mov	r1, r6
 80041ea:	4638      	mov	r0, r7
 80041ec:	eb04 0803 	add.w	r8, r4, r3
 80041f0:	f000 f878 	bl	80042e4 <_sbrk_r>
 80041f4:	4580      	cmp	r8, r0
 80041f6:	d13a      	bne.n	800426e <_malloc_r+0xd2>
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	3503      	adds	r5, #3
 80041fc:	1a6d      	subs	r5, r5, r1
 80041fe:	f025 0503 	bic.w	r5, r5, #3
 8004202:	3508      	adds	r5, #8
 8004204:	2d0c      	cmp	r5, #12
 8004206:	bf38      	it	cc
 8004208:	250c      	movcc	r5, #12
 800420a:	4638      	mov	r0, r7
 800420c:	4629      	mov	r1, r5
 800420e:	f7ff ffa5 	bl	800415c <sbrk_aligned>
 8004212:	3001      	adds	r0, #1
 8004214:	d02b      	beq.n	800426e <_malloc_r+0xd2>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	442b      	add	r3, r5
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	e00e      	b.n	800423c <_malloc_r+0xa0>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	1b52      	subs	r2, r2, r5
 8004222:	d41e      	bmi.n	8004262 <_malloc_r+0xc6>
 8004224:	2a0b      	cmp	r2, #11
 8004226:	d916      	bls.n	8004256 <_malloc_r+0xba>
 8004228:	1961      	adds	r1, r4, r5
 800422a:	42a3      	cmp	r3, r4
 800422c:	6025      	str	r5, [r4, #0]
 800422e:	bf18      	it	ne
 8004230:	6059      	strne	r1, [r3, #4]
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	bf08      	it	eq
 8004236:	6031      	streq	r1, [r6, #0]
 8004238:	5162      	str	r2, [r4, r5]
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	4638      	mov	r0, r7
 800423e:	f104 060b 	add.w	r6, r4, #11
 8004242:	f000 f865 	bl	8004310 <__malloc_unlock>
 8004246:	f026 0607 	bic.w	r6, r6, #7
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	1af2      	subs	r2, r6, r3
 800424e:	d0b6      	beq.n	80041be <_malloc_r+0x22>
 8004250:	1b9b      	subs	r3, r3, r6
 8004252:	50a3      	str	r3, [r4, r2]
 8004254:	e7b3      	b.n	80041be <_malloc_r+0x22>
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	42a3      	cmp	r3, r4
 800425a:	bf0c      	ite	eq
 800425c:	6032      	streq	r2, [r6, #0]
 800425e:	605a      	strne	r2, [r3, #4]
 8004260:	e7ec      	b.n	800423c <_malloc_r+0xa0>
 8004262:	4623      	mov	r3, r4
 8004264:	6864      	ldr	r4, [r4, #4]
 8004266:	e7b2      	b.n	80041ce <_malloc_r+0x32>
 8004268:	4634      	mov	r4, r6
 800426a:	6876      	ldr	r6, [r6, #4]
 800426c:	e7b9      	b.n	80041e2 <_malloc_r+0x46>
 800426e:	230c      	movs	r3, #12
 8004270:	4638      	mov	r0, r7
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	f000 f84c 	bl	8004310 <__malloc_unlock>
 8004278:	e7a1      	b.n	80041be <_malloc_r+0x22>
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	e7de      	b.n	800423c <_malloc_r+0xa0>
 800427e:	bf00      	nop
 8004280:	2000019c 	.word	0x2000019c

08004284 <_realloc_r>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	4680      	mov	r8, r0
 800428a:	4614      	mov	r4, r2
 800428c:	460e      	mov	r6, r1
 800428e:	b921      	cbnz	r1, 800429a <_realloc_r+0x16>
 8004290:	4611      	mov	r1, r2
 8004292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004296:	f7ff bf81 	b.w	800419c <_malloc_r>
 800429a:	b92a      	cbnz	r2, 80042a8 <_realloc_r+0x24>
 800429c:	f7ff ff16 	bl	80040cc <_free_r>
 80042a0:	4625      	mov	r5, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a8:	f000 f838 	bl	800431c <_malloc_usable_size_r>
 80042ac:	4284      	cmp	r4, r0
 80042ae:	4607      	mov	r7, r0
 80042b0:	d802      	bhi.n	80042b8 <_realloc_r+0x34>
 80042b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042b6:	d812      	bhi.n	80042de <_realloc_r+0x5a>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff ff6e 	bl	800419c <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0ed      	beq.n	80042a2 <_realloc_r+0x1e>
 80042c6:	42bc      	cmp	r4, r7
 80042c8:	4622      	mov	r2, r4
 80042ca:	4631      	mov	r1, r6
 80042cc:	bf28      	it	cs
 80042ce:	463a      	movcs	r2, r7
 80042d0:	f7ff fed4 	bl	800407c <memcpy>
 80042d4:	4631      	mov	r1, r6
 80042d6:	4640      	mov	r0, r8
 80042d8:	f7ff fef8 	bl	80040cc <_free_r>
 80042dc:	e7e1      	b.n	80042a2 <_realloc_r+0x1e>
 80042de:	4635      	mov	r5, r6
 80042e0:	e7df      	b.n	80042a2 <_realloc_r+0x1e>
	...

080042e4 <_sbrk_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	2300      	movs	r3, #0
 80042e8:	4d05      	ldr	r5, [pc, #20]	; (8004300 <_sbrk_r+0x1c>)
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fd fa0a 	bl	8001708 <_sbrk>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_sbrk_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_sbrk_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200001a4 	.word	0x200001a4

08004304 <__malloc_lock>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__malloc_lock+0x8>)
 8004306:	f000 b811 	b.w	800432c <__retarget_lock_acquire_recursive>
 800430a:	bf00      	nop
 800430c:	200001a8 	.word	0x200001a8

08004310 <__malloc_unlock>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__malloc_unlock+0x8>)
 8004312:	f000 b80c 	b.w	800432e <__retarget_lock_release_recursive>
 8004316:	bf00      	nop
 8004318:	200001a8 	.word	0x200001a8

0800431c <_malloc_usable_size_r>:
 800431c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004320:	1f18      	subs	r0, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfbc      	itt	lt
 8004326:	580b      	ldrlt	r3, [r1, r0]
 8004328:	18c0      	addlt	r0, r0, r3
 800432a:	4770      	bx	lr

0800432c <__retarget_lock_acquire_recursive>:
 800432c:	4770      	bx	lr

0800432e <__retarget_lock_release_recursive>:
 800432e:	4770      	bx	lr

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
